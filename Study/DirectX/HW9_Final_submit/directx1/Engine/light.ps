/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;
cbuffer LightBuffer
{
float4 ambientColor;
 float4 diffuseColor;
 float3 lightDirection;
 float specularPower;
 float4 specularColor;
};
//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
float4 position : SV_POSITION;
 float2 tex : TEXCOORD0;
 float3 normal : NORMAL;
 float3 viewDirection : TEXCOORD1;

};
////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
 float4 textureColor;
 float3 lightDir;
 float lightIntensity;
 float4 color;
 float3 reflection;
 float4 specular;

 textureColor = shaderTexture.Sample(SampleType, input.tex);
 color = ambientColor;
 specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

 lightDir = -lightDirection;
 lightIntensity = saturate(dot(input.normal, lightDir));
 if(lightIntensity > 0.0f)
 {
	color += (diffuseColor * lightIntensity);
	// Saturate the ambient and diffuse color.
	color = saturate(color);
	// Calculate the reflection vector based on the light intensity, normal vector, and light direction.
	reflection = normalize(2 * lightIntensity * input.normal - lightDir); 
	// Determine the amount of specular light based on the reflection vector, viewing direction, and specular power.
	specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
 }
 color = color * textureColor;
 // Add the specular component last to the output color.
 color = saturate(color + specular);
 return color;
}